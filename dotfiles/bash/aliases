# TIPS
# ----
# !79                  > rerun the command 79 in the history
# !echo                > rerun the last command with 'echo' in the history
# ^r ^g                > do a reverse search, then cancel
# mv README{.txt,.doc} > change extension without retyping the name

# SHELL
# -----
alias  l='ls -la'
alias  h='history'
alias md='mkdir -p'
alias cx='chmod +x'
alias rf='rm -rf'
alias dh='du -hd 0' # current folder size
alias tf='tail -f'
function psg() { # find a running process
  ps aux | head -1
  ps aux | grep "$*" | grep -v "grep"
}
function psk() { # kill a running process
  kill $(ps axo pid,command| grep "$*" | grep -v "grep" | cut -d' ' -f1)
}

# BREW
# ---
alias bri='brew install'

# GIT
# ---
alias  gs='git status'
alias  gd='git diff'
alias gdh='git diff HEAD HEAD~'
alias gdc='git diff --cached'
alias gdf='git diff --name-status'
alias  gh='git show'
alias gsf='git show --name-status'
alias  ga='git add'
alias  gl='git log'
alias  gf='git fetch'
alias gl-='git log --follow --'
alias glf='git log --pretty=medium'
alias ghh='git show HEAD'
alias glm='git log --pretty=full --author `git config user.name`'
alias ghm='git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short'
alias  gu='git pull'
alias  gv='git mv'
alias gli='git update-index --assume-unchanged' # locally ignore changes
alias glu='git update-index --no-assume-unchanged' # stop ignoring changes
alias  gc='git commit'
alias  go='git checkout'
alias gcp='git cherry-pick'
alias  gb="git for-each-ref --sort=committerdate refs/heads/ --format='%1B[0;33m%(authordate:short)%1B[0;31m %(refname:short)%1B[m | %(subject)' refs/heads"
alias gbr='git branch -r'
alias  gm='git merge'
alias gmf='git merge --no-ff --no-edit'
alias gom='git checkout master'
alias gos='git checkout staging'
alias gomm='git checkout origin/master -b master'
alias gmm='git merge master'
alias grm='git rebase master'
alias grs='git rebase staging'
alias  gr='git rebase --preserve-merges'
alias  gp='git push -u'
alias  gt='git stash -u'
alias gta='git stash apply'
alias gca='git add -A . && git commit --amend --no-edit'
alias grh='git reset HEAD'
alias grhh='git reset --hard HEAD'
alias  gla='git shortlog -ns' # Summary by author
alias  gbn="git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'" # current branch name
alias  gra='git rebase --abort'
alias  grc='git rebase --continue'
alias  gpr='git branch | cut -c 3- | grep -v master | xargs -L1 git branch -d 2> /dev/null' # Prune already merged local branches
alias  gwh='git branch -a | grep' # git which: which remote branch matches the regex
alias grpo='git remote prune origin'
alias   g!='git fetch && git rebase origin/master && gpr'
alias gbpurge='git branch --merged | grep -v "\*" | grep -v "master" | grep -v "develop" | grep -v "staging" | xargs -n 1 git branch -d'

function gp!() { # pushes. if the current branch is staging, opens a PR against master
  if [ "$(gbn)" == "staging" ]
  then
    git fetch
    git rebase origin/master
    git push -u
    repo=`git remote -v|grep -m1 origin | cut -d\: -f2 | cut -d\. -f1`
    open "https://github.com/$repo/compare/staging?expand=1"
  else
    git push -u
  fi
}

function gcl() { # clone and changes to the folder. Add github.com if missing
  if [ $(echo $1 | tr -dc '/' | wc -c) -eq 1 ]
  then
    url="https://github.com/$1.git"
  else
    url=$1
  fi
  git clone $url
  cd $(echo ${url##*/} | cut -d. -f1)
}

function grd() { # git restore deleted file
  git checkout $(git rev-list -n 1 HEAD -- "$1")^ -- "$1"
}
function gbt() { # git checkout and track remote branch
  git checkout -t -b $1 origin/$1
}
function gsu() { # git track the remote branch with the same name as the current
  git branch --set-upstream $(gbn) origin/$(gbn)
}
function gg() { # git commit that reads the message from the same line
  git add .
  git commit -v -a -m "$*"
}
function gbump() { # bumps a gem, commits and create a tag
  rake version:bump:patch
  git tag -a v`cat VERSION` -m'`git log HEAD^^..HEAD^ --format=%s`'
  git push
  git push --tags
}
function gsh() { # shortens a Github URL
  url=$1
  anchor_split=($(echo $url |sed  's/\(#\)/\1 /g'))
  short=$(curl -i http://git.io -F "url=${anchor_split[0]}" 2>|/dev/null | awk '/^Location:/ { print $2 }' | sed -e 's/[[:cntrl:]]//')
  short_with_anchor="${short}#${anchor_split[1]}"
  echo $short_with_anchor | pbcopy
  echo $short_with_anchor
}

function gc-() { # restore the last version of a deleted file
  git checkout $(git log --pretty=format:"%h" --follow -- $1 | head -n 1)^ -- $1
}
function gob() { # create a feature branch with an empty "Start feature" commit message (to measure time)
  git checkout -b $1 && git commit --allow-empty -m"Start $1"
}
function gri() { # interactive rebase with the previous SHA
  git rebase -i $1^
}

alias ungit="find . -name '.git' -exec rm -rf {} \;"

# GIT AUTOCOMPLETE
# ----------------
source ~/bin/git-completion.bash
complete -o default -o nospace -F _git_diff gd
complete -o default -o nospace -F _git_log gl
complete -o default -o nospace -F _git_pull gu
complete -o default -o nospace -F _git_checkout go
complete -o default -o nospace -F _git_branch gb
complete -o default -o nospace -F _git_merge gm
complete -o default -o nospace -F _git_merge gmf
complete -o default -o nospace -F _git_merge gp!
complete -o default -o nospace -F _git_push gp
complete -o default -o nospace -F _git_stash gt
complete -o default -o nospace -F _git_rebase gr
# Nice to have: the output of gbr autocompletes gbt

# RAKE
# ----
alias rdc='rake db:create'
alias rdm='rake db:migrate'
alias rds='rake db:setup'
alias rdr='rake db:rollback'
alias  rr='rake routes'
alias  rj='rake jasmine'
alias  rt='rake -T --all'
alias rake!='rf spec/fixtures/vcr_cassettes && rake'

# RAILS
# -----
alias  r='rails'
function rv {
  if [ -f script/server ]; then # Rails 2
    script/server $*;
  elif [ -f script/rails ]; then # Rails 3
    script/rails server $*;
  elif [ -f bin/rails ]; then # Rails 4
    bin/rails server $*;
  fi
}
function get_bg {
  osascript -e "tell application \"Terminal\" to get current settings of first window"
}

function set_bg {
  osascript -e "tell application \"Terminal\" to set background color of first window to $1"
}

function unset_bg {
  osascript -e "tell application \"Terminal\" to set current settings of first window to $*"
}

alias  rc='rails console'
alias  rg='rails generate'
alias rgs='rails generate scaffold'
alias rgm='rails generate migration'
function rn {
  cd ~/code;
  rails new $* --skip-gemfile --skip-prototype --database=mysql;
  cd $1;
  cp ../Gemfile .;
  bundle;
}
alias tl='tail -f log/development.log'
alias st='mkdir -p tmp && touch tmp/restart.txt'

alias jhw='jasmine-headless-webkit'

alias  db='pry-remote'

function rspecify () {
  echo "
group :test, :development do
  gem 'rspec-rails'
end
" >> Gemfile
  bundle
  rails generate rspec:install
}


# BUNDLER
# -------
alias be='bundle exec'
alias bi='bundle install'
alias bu='bundle update'
alias bo='bundle open'
alias bc='bundle console' # yes, it's a command, but I never use it

# Don't require bundle exec for main bundled commands
# From http://marc-bowes.com/2011/09/21/dry-your-bundle-exec-tears.html
bundle_commands="foreman rake spec rspec cucumber cap watchr rails rackup guard etl compass jasmine-headless-webkit thor sidekiq parallel_rspec zeus spring knife pry-remote jekyll middleman padrino yard"

function run_bundler_cmd () {
  if [ -r ./Gemfile ] || [  $(basename "${PWD%/*}") == "rails" ] ; then
    bundle exec $@
  else
    $@
  fi
}

for cmd in $bundle_commands
do
  alias $cmd="run_bundler_cmd $cmd"
done

# RBENV
# -----
function gi {
  gem install $*;
  rbenv rehash;
}

function gua { # gem uninstall all (except system), then reinstall bundler, pry and git (used by Textmate Github plugin)
  gem list | cut -d" " -f1 | grep -v test-unit | grep -v psych | grep -v rdoc | grep -v io-console | grep -v rake | grep -v bigdecimal | grep -v json | grep -v minitest | xargs gem uninstall -aIx
  gem install bundler git pry jekyll
}

# TOP
# ---
alias tc='top -o cpu'
alias tv='top -o vsize'

# COMMON PATHS
# ----

alias  cdb='cd ~/bin'
alias  cdp='cd ~/projects'
alias  cddr='cd ~/projects/doc_rank'
alias  cdkw='cd ~/projects/keyword'
alias  cdfa='cd ~/projects/fb-auth'
alias  cdfc='cd ~/projects/fb-core'
alias  cdfs='cd ~/projects/fb-support'
alias  cd424='cd ~/projects/cecs424/12906112'
alias  cda='cd ~/projects/accounts'
alias  cdd='cd ~/projects/ditto'
alias  cdl='cd ~/projects/limelight'
